# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from category_encoders import TargetEncoder
from sklearn.preprocessing import StandardScaler
import sklearn
sklearn.set_config(transform_output='pandas')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="House Price Prediction App", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üè° House Price Prediction App")
st.write("Upload your test dataset and get house price predictions using a pre-trained CatBoost model.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load('cat_boost_pipline.pkl')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def preprocess_input_data(input_data, numeric_columns, categorical_columns):
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    input_data[numeric_columns] = input_data[numeric_columns].fillna(input_data[numeric_columns].median())
    input_data[categorical_columns] = input_data[categorical_columns].fillna("Missing")

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–µ–π–ª–µ—Ä–∞ –∫ —á–∏—Å–ª–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
    scaler = StandardScaler()
    input_data[numeric_columns] = scaler.fit_transform(input_data[numeric_columns])

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ TargetEncoder –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    encoder = TargetEncoder()
    input_data[categorical_columns] = encoder.fit_transform(input_data[categorical_columns], np.zeros(len(input_data)))

    return input_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
def predict_and_evaluate(model, X):
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = model.predict(X)
    return predictions

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("Upload your CSV file for prediction", type=["csv"])

# –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_data = pd.read_csv(uploaded_file)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'Id', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if 'Id' in input_data.columns:
        input_data = input_data.drop(['Id'], axis=1)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    numeric_columns = input_data.select_dtypes(include=['number']).columns.tolist()
    categorical_columns = input_data.select_dtypes(include=['object']).columns.tolist()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    input_data = preprocess_input_data(input_data, numeric_columns, categorical_columns)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    st.subheader("Uploaded Data Preview")
    st.write(input_data.head())

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    predictions = predict_and_evaluate(model, input_data)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    predictions = np.expm1(predictions)

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_df = pd.DataFrame()
    results_df['Predicted SalePrice'] = predictions

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("Prediction Results")
    st.write(results_df.head())

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    st.download_button(label="Download Predictions as CSV",
                       data=results_df.to_csv(index=False).encode('utf-8'),
                       file_name='house_price_predictions.csv',
                       mime='text/csv')

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    st.subheader("Visualization of Predictions")
    fig, ax = plt.subplots(1, 2, figsize=(14, 5))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    sns.histplot(predictions, kde=True, color='skyblue', ax=ax[0])
    ax[0].set_title("Distribution of Predicted House Prices")
    ax[0].set_xlabel("Predicted Sale Price")

    # # –ì—Ä–∞—Ñ–∏–∫ 2: Scatter plot —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    # if 'SalePrice' in input_data.columns:
    #     true_prices = np.expm1(input_data['SalePrice'])  # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ SalePrice –≤ –¥–∞–Ω–Ω—ã—Ö
    #     sns.scatterplot(x=true_prices, y=predictions, ax=ax[1], color='purple')
    #     ax[1].set_xlabel("Actual Sale Price")
    #     ax[1].set_ylabel("Predicted Sale Price")
    #     ax[1].set_title("Actual vs Predicted Sale Prices")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.pyplot(fig)

else:
    st.write("Please upload a CSV file for prediction.")
